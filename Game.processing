class wordBank { 
	constructor(word, hint) {
		this.word = word
		this.hint = hint
	}
}

class gradeOneWordBank { 
	constructor(word, image, hint) {
		this.word = word
		this.image = image
		this.hint = hint
		
  }
}

let gradeOneWords = [
		new gradeOneWordBank("cat", "", "This animal meows!"),
		new gradeOneWordBank("dog", "l", "This animal woofs!"),
		new gradeOneWordBank("barn", "l", "This word is a thing that has horses and hay."),
		new gradeOneWordBank("farm", "l", "Old McDonald's had a ___"),
		new gradeOneWordBank("milk", "l", "A white liquid many people drink."),
		new gradeOneWordBank("seven", "l", "4 + 3"),
		new gradeOneWordBank("square", "l", "A 4 sided shape with equal side lengths.")
	]

var prompt = [];
var timeT;
var widthC;
var heightC;
var index;
var blankPrompt = [];
var milliPassed;
var timeReset = 0;
var cycle = 1;
var bombTime = 30
var arrowDisplacement;
var timeIndent = 0;

function setup() {
	createCanvas(windowWidth, windowHeight);
	background(25);
	//define resolution
	widthC = windowWidth;
	heightC = windowHeight;
	arrowDisplacement = widthC/8
	
	//define it once
	index = Math.floor(random(0,gradeOneWords.length))
	prompt = gradeOneWords[index]
	promptWord = prompt.word
	
	//know what the prompt is
	print(promptWord);
	text(prompt,100,100)
}

function draw() {
	milliPassed = millis()
	milliPassed = milliPassed - timeReset
	

	stroke(0, 0, 0)
	strokeWeight(0)
	
	checkChangeRound();
	clear();
	promptPrint()
	labels();
	PlayerAvatars();
	arrowDraw();
	
	stroke(0, 0, 0)
	strokeWeight(0)
	
	bombDraw();
}

function PlayerAvatars() {
	fill(247, 52, 81)
	square(widthC/10, heightC/2 - widthC/10, widthC/5)
  fill(255)
	textSize(40)
	text("Player 1", widthC*3/20, heightC/2)
	fill(122, 94, 247)
	square(widthC - (widthC/5 + widthC/10), heightC/2 - widthC/10, widthC/5)
	fill(255)
	textSize(40)
	text("Player 2", widthC - (widthC*5/20), heightC/2)
}
// drawing out the prompt on screen
function promptPrint() {
	//round down because rounding up could result in error
	var tSize = 50
	for(var i = 0; i < promptWord.length; i++) {
		blankPrompt.push(prompt[i] == " " ? " " : "_");
		textSize(tSize)
		//approximation of length of text
		var textL = promptWord.length * (5 + tSize)
		//dent
		var textDent = (width - textL) / 2
		text(blankPrompt[i], textDent + (5 + tSize) * i, height/5)
}
}

function keyPressed() {
	// print("key pressed is", key);
  if (key >= 'a' && key <= 'z') { 
		print("You guessed", key);
		// Find all instances of key in prompt
		let incorrectGuesses = [];
		let result = [];
		for(var i = 0; i < promptWord.length; i++) {
    	if (promptWord[i] === key) {
				result.push(i);
				blankPrompt[i] = key;
			}
		}
		
		// Check results for matches
		if (result.length > 0) {
			// we found a match
			print("Found matches at indices", result);
		}
		else {
			print("NO MATCH!");
			
		}
  }
}

function labels() {
	
}

function checkChangeRound() {
	//check win condition
	for(var i = 0; i < promptWord.length; i++) {
		}
}

function bombDraw() {
	fill(100,100,100)
	circle(widthC/2, heightC/2, widthC/8)
	
	bombDeltaTime()
	
	//timer on bomb
	var bombTimeDisplay = bombTime - floor(milliPassed/1000)
	fill(255,255,255)
	textSize(75)
	text(bombTimeDisplay, width/2, height/2)
}

function bombDeltaTime() {
	print(floor(milliPassed/1000))
	//timer has hit 0
	if(milliPassed >= bombTime * 1000) {
		cycle++
		timeReset = timeIndent + milliPassed - 5 * (cycle-1);
		timeIndent = timeReset
		bombTime = bombTime - 5
		arrowDisplacement = arrowDisplacement * -1
		//reset prompt choosing sequence
		index = Math.floor(random(0,gradeOneWords.length))
		prompt = gradeOneWords[index]
		promptWord = prompt.word
		//reset printed prompt
		for(var i = 0; i < promptWord.length; i++) {
		blankPrompt.push(prompt[i] == " " ? " " : "_");
		blankPrompt[i] = "_"
		}
	}
}

function arrowDraw() {
	strokeWeight(15);
	stroke(255,255,0)
	fill(255,255,0)
	line(widthC/2, heightC/2, widthC/2 + arrowDisplacement, heightC/2)
	triangle(widthC/2 + arrowDisplacement, heightC/2 + height/50, widthC/2 + arrowDisplacement, heightC/2 - height/50, widthC/2 + arrowDisplacement * 1.1, heightC/2)
}
